1 + 2;;
-2 * 2;;
1 < 2;;
fun x -> x;;
fun x -> fun y -> x;;
fun x -> fun y -> y;;
(fun x -> x + 1) 2 + (fun x -> x + -1) 3;;
fun f -> fun g -> fun x -> g (f x);;
fun x -> fun y -> fun z -> x z (y z);;
fun x -> let y = x + 1 in x;;
fun x -> let y = x + 1 in y;;
fun b -> fun x -> if x b then x else (fun x -> b);;
fun x -> if true then x else (if x then true else false);;
fun x -> fun y -> if x then x else y;;
fun n -> (fun x -> x (fun y -> y)) (fun f -> f n);;
fun x -> fun y -> x y;;
fun x -> fun y -> x (y x);;
fun x -> fun y -> x (y x) (y x);;
fun x -> fun y -> fun z -> x (z x) (y (z x y));;
let id = fun x -> x in let f = fun y -> id (y id) in f;;
let k = fun x -> fun y -> x in let k1 = fun x -> fun y -> k (x k) in k1;;
let s = fun x -> fun y -> fun z -> x z (y z) in let s1 = fun x -> fun y -> fun z -> x s (z s) (y s (z s)) in s1;;
let g = fun h -> fun t -> fun f -> fun x -> f h (t f x) in g;;
let s = fun x -> fun y -> fun z -> x z (y z) in let k = fun x -> fun y -> x in let k' = fun x -> fun y -> x in s k k';;
let s = fun x -> fun y -> fun z -> x z (y z) in let k = fun x -> fun y -> x in s k k ;;
let s = fun x -> fun y -> fun z -> x z (y z) in let k' = fun x -> fun y -> y in s k' k';;
fun x -> fun y -> fun z -> let b = x y z in if b then z y else y;;
let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in proj1 (pair 1 100);;
let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in proj1 (proj2 (pair 10 (pair 20 30)));;
let f = fun x -> x in if f true then f 1 else f 2;;
let f = fun x -> 3 in f true + f 4;;
fun b -> let f = fun x -> x in let g = fun y -> y in if b then f g else g f;;
fun b -> fun f -> let g1 = fun x -> x f in let g2 = fun x -> x f in fun z -> if b then g1 z g2 else g2 z g1;;
1 + true;;
2 + (fun x -> x);;
-2 * false;;
fun x -> x x;;
let f = fun x -> fun g -> g (x x g) in f f;;
let g = fun f -> fun x -> f x (f x) in g;;
let g = fun f -> fun x -> f x (x f) in g;;
fun x -> fun y -> x y + y x;;
fun x -> fun y -> x y + x;;
fun x -> fun y -> if x y then x else y;;
fun x -> fun y -> if x y then (fun z -> if y z then z else x) else (fun x -> x);;
fun x -> fun y -> fun z -> let b = x y z in if b then z y else z x;;
fun x -> fun y -> fun z -> if x y then z x else y z;;
fun x -> if x then 1 else x;;
(fun x -> x + 1) true;;
fun x -> fun y -> y (x (y x));;
(fun f -> fun x -> f (f x)) (fun x -> fun y -> x);;
fun x -> fun y -> y (x (fun z1 -> fun z2 -> z1)) (x (fun z -> z));;
fun b -> fun f -> let g1 = fun x -> f x in let g2 = fun x -> f x in if b then g1 g2 else g2 g1;;
