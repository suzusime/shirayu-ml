let rec f = fun x -> f in f;;
let rec f = fun x -> f x in f;;
let rec f = fun x -> f (f x) in f;;
let rec fix_fun = fun g -> fun x -> g (fix_fun g) x in fix_fun;;
fun f -> let rec x = fun z -> f (x z) in x 666;;
let rec f = fun x -> fun y -> if x < 0 then y else f (x + -1) y in f;;
fun f -> fun g -> let rec h = fun x -> h (g (f x)) in h;;
let rec loop = fun f -> fun x -> (loop f) (f x) in loop;;
let rec looq = fun f -> fun x -> (looq f) (x f) in looq;;
fun x -> let rec f = fun y -> x + 1 in x;;
let rec ind = fun x -> fun f -> fun n -> if n < 1 then x else f (ind x f (n + -1)) in ind;;
let rec f = fun x -> f (x f) in f;;
let rec f = fun z -> f z (fun g -> fun h -> h (g h)) in f;;
